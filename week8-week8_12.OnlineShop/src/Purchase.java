import java.util.Objects;

public class Purchase {
    //Object attributes/vars
    private String product;
    private int amount;
    private int unitPrice;

    //Object constructors
    public Purchase(String product, int amount, int unitPrice){
        this.product = product;
        this.amount = amount;
        this.unitPrice = unitPrice;
    }

    //Object methods
    //Returns the amount of the sale of the product
    public int price(){
        return this.amount * this.unitPrice;
    }

    //Increases the # of units sold by one
    public void increaseAmount(){
        this.amount++;
    }

    @Override  //Overrides the object toString method
    public String toString(){
        return this.product + ": " + this.amount;
    }

    /*We are overriding the equals and hashCode methods of the object class.  I'm doing this so
    that we can compare an object against an object in the ShoppingBasket class.  The following line
    of code will not work correctly without these as it doesn't look at the contents inside the object
    during the comparison: if(!shopBasket.contains(singlePurchase)).  The equals will now only compare
    the product name for two object since we don't want the same product to show up twice in our arrayList.
    These two functions were auto generated by Intellij.  I modified the return statement to only compare
    the product vars and not all vars in those objects.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Purchase purchase = (Purchase) o;
        /*return amount == purchase.amount &&
                unitPrice == purchase.unitPrice &&
                Objects.equals(product, purchase.product);*/
        return Objects.equals(product, purchase.product);
    }

    @Override
    public int hashCode() {
        return Objects.hash(product, amount, unitPrice);
    }
}
